function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var walk = function walk(current, callback) {
  callback(current);
  current.getWidgets().filter(function (widget) {
    return widget.$$type === 'ais.index';
  }).forEach(function (innerIndex) {
    walk(innerIndex, callback);
  });
};

var RoutingManager =
/*#__PURE__*/
function () {
  function RoutingManager(_ref) {
    var router = _ref.router,
        stateMapping = _ref.stateMapping,
        instantSearchInstance = _ref.instantSearchInstance;

    _classCallCheck(this, RoutingManager);

    _defineProperty(this, "instantSearchInstance", void 0);

    _defineProperty(this, "router", void 0);

    _defineProperty(this, "stateMapping", void 0);

    this.router = router;
    this.stateMapping = stateMapping;
    this.instantSearchInstance = instantSearchInstance;
    this.createURL = this.createURL.bind(this);
  }

  _createClass(RoutingManager, [{
    key: "read",
    value: function read() {
      var route = this.router.read();
      return this.stateMapping.routeToState(route);
    }
  }, {
    key: "write",
    value: function write(_ref2) {
      var state = _ref2.state;
      var route = this.stateMapping.stateToRoute(state);
      this.router.write(route);
    }
  }, {
    key: "subscribe",
    value: function subscribe() {
      var _this = this;

      this.router.onUpdate(function (route) {
        var uiState = _this.stateMapping.routeToState(route);

        walk(_this.instantSearchInstance.mainIndex, function (current) {
          var widgets = current.getWidgets();
          var indexUiState = uiState[current.getIndexId()] || {};
          var searchParameters = widgets.reduce(function (parameters, widget) {
            if (!widget.getWidgetSearchParameters) {
              return parameters;
            }

            return widget.getWidgetSearchParameters(parameters, {
              uiState: indexUiState
            });
          }, current.getHelper().state);
          current.getHelper().overrideStateWithoutTriggeringChangeEvent(searchParameters);

          _this.instantSearchInstance.scheduleSearch();
        });
      });
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this.router.dispose();
    }
  }, {
    key: "createURL",
    value: function createURL(nextState) {
      var uiState = Object.keys(nextState).reduce(function (acc, indexId) {
        return _objectSpread({}, acc, _defineProperty({}, indexId, nextState[indexId]));
      }, this.instantSearchInstance.mainIndex.getWidgetState({}));
      var route = this.stateMapping.stateToRoute(uiState);
      return this.router.createURL(route);
    }
  }]);

  return RoutingManager;
}();

export default RoutingManager;